from aiogram import Router, types, Bot, F
from aiogram.filters import Command
from excel_utils import (
    user_exists, add_participant, get_participants, get_quest_title,
    update_status, update_score, get_question_data,
    set_start_time, set_end_time, get_status
)
from config import excel_lock, SKIP_PENALTY, ADMIN_IDS
from keyboards import question_keyboard
from state_manager import (
    init_player_state, get_state, set_message_id,
    add_attempt, add_hint, active_states
)

router = Router()

# ‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
waiting_for_team_name = set()

# ‚úÖ /start
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    if not user_exists(message.from_user.id):
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /register, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ñ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")

# ‚úÖ /register
@router.message(Command("register"))
async def cmd_register(message: types.Message):
    if user_exists(message.from_user.id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è.")
        return
    waiting_for_team_name.add(message.from_user.id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –æ—Ç–≤–µ—Ç)
@router.message(F.text & ~F.text.startswith("/"))
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    await message.delete()  # ‚úÖ –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞

    # ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if user_id in waiting_for_team_name:
        team_name = message.text.strip()
        if len(team_name) < 2:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        async with excel_lock:
            add_participant(user_id, message.from_user.username, team_name, status="wait")

        waiting_for_team_name.remove(user_id)
        await message.answer(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{team_name}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –ñ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–∞.")
        return

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if not user_exists(user_id):
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /register.")
        return

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    status = str(get_status(user_id))

    if status == "wait":
        await message.answer("–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∫–≤–µ—Å—Ç–∞...")
        return
    elif status == "finished":
        await message.answer("–í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–≤–µ—Å—Ç! –ñ–¥–∏—Ç–µ –∏—Ç–æ–≥–æ–≤.")
        return

    # ‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if status.isdigit() and int(status) >= 1:
        await process_answer(message)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
async def process_answer(message: types.Message):
    user_id = message.from_user.id
    status = int(get_status(user_id))
    answer = message.text.strip().lower()
    state = get_state(user_id)
    add_attempt(user_id, answer)

    q_data = get_question_data(status)

    if answer in q_data["answers"]:
        update_score(user_id, q_data["price"])

        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_question(message.bot, user_id, status, "üü¢ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç üü¢", state_update=False, disable_buttons=True)

        # ‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
        if status >= q_data["max_q"]:
            set_end_time(user_id)
            update_status(user_id, "finished")
            if user_id in active_states:
                del active_states[user_id]
            await message.bot.send_message(user_id, "üéâ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–≤–µ—Å—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
            return

        # ‚úÖ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        update_status(user_id, status + 1)
        init_player_state(user_id)
        await send_question(message.bot, user_id, status + 1, "")
    else:
        await send_question(message.bot, user_id, status, "üî¥ –û—Ç–≤–µ—Ç –Ω–µ –≤–µ—Ä–Ω—ã–π üî¥", state_update=False)

# ‚úÖ /rating ‚Äî —Ä–µ–π—Ç–∏–Ω–≥
@router.message(Command("rating"))
async def cmd_rating(message: types.Message):
    title = get_quest_title()
    participants = get_participants()
    sorted_teams = sorted(participants, key=lambda x: x[4], reverse=True)
    text = f"üèÜ {title}\n\n"
    for i, p in enumerate(sorted_teams, start=1):
        text += f"{i}. {p[3]} ‚Äî {p[4]}üíé (+{p[7]} –∑–∞ ‚åõ)\n"
    await message.answer(text)

# ‚úÖ /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
@router.message(Command("help"))
async def cmd_help(message: types.Message):
    text = "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
    text += "üë§ *–î–ª—è –∏–≥—Ä–æ–∫–æ–≤:*\n"
    text += "/start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
    text += "/register ‚Äî –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É\n"
    text += "/rating ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥\n"
    text += "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"

    if message.from_user.id in ADMIN_IDS:
        text += "üõ† *–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n"
        text += "/startgame ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É\n"
        text += "/stopgame ‚Äî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É\n"
        text += "/resetgame ‚Äî –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É\n"
        text += "/broadcast <—Ç–µ–∫—Å—Ç> ‚Äî –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        text += "/changeleader <old_id> <new_id> ‚Äî –°–º–µ–Ω–∏—Ç—å –ª–∏–¥–µ—Ä–∞\n"
        text += "/removeadmin ‚Äî –°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞\n"

    await message.answer(text, parse_mode="Markdown")

# ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(bot: Bot, user_id: int, question_num: int, status_text: str = "", state_update=True, disable_buttons=False):
    data = get_question_data(question_num)
    if not data:
        set_end_time(user_id)
        update_status(user_id, "finished")
        await bot.send_message(user_id, "‚úÖ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
        return

    if state_update:
        set_start_time(user_id)

    state = get_state(user_id)
    text = format_question_message(question_num, data, status_text, state)

    kb = None
    if not disable_buttons:
        kb = question_keyboard(data["hints"], state["hints"])

    if state["message_id"]:
        await bot.edit_message_text(chat_id=user_id, message_id=state["message_id"], text=text, reply_markup=kb)
    else:
        msg = await bot.send_message(user_id, text, reply_markup=kb)
        set_message_id(user_id, msg.message_id)

# ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
def format_question_message(q_num, data, status_text, state):
    text = f"‚ùì –í–æ–ø—Ä–æ—Å ‚Ññ{q_num}\n"
    if status_text:
        text += status_text + "\n"
    text += f"{data['question']}\n\n"

    if state["attempts"]:
        text += "–í—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏:\n"
        for a in state["attempts"]:
            text += f"- {a}\n"

    if state["hints"]:
        text += "\n"
        for i in state["hints"]:
            text += f"üíé –ü–æ–¥—Å–∫–∞–∑–∫–∞ {i}: {data['hints'][i-1][0]}\n"

    return text

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
@router.callback_query(F.data.startswith("hint_"))
async def use_hint(callback: types.CallbackQuery, bot: Bot):
    hint_idx = int(callback.data.split("_")[1])
    status = get_status(callback.from_user.id)
    q_data = get_question_data(int(status))
    price = q_data["hints"][hint_idx-1][1]

    update_score(callback.from_user.id, -price)
    add_hint(callback.from_user.id, hint_idx)
    await send_question(bot, callback.from_user.id, int(status), "üí° –í—ã –≤–∑—è–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É", state_update=False)
    await callback.answer()

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
@router.callback_query(F.data == "skip")
async def skip_question(callback: types.CallbackQuery, bot: Bot):
    status = get_status(callback.from_user.id)

    await send_question(bot, callback.from_user.id, int(status), "üéüÔ∏è –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω üéüÔ∏è", state_update=False, disable_buttons=True)

    update_score(callback.from_user.id, -SKIP_PENALTY)
    next_q = int(status) + 1
    init_player_state(callback.from_user.id)
    update_status(callback.from_user.id, next_q)

    await send_question(bot, callback.from_user.id, next_q, "")
    await callback.answer()
